apiVersion: theodolite.rocks/v1beta1
kind: benchmark
metadata:
  name: shuffle-kstreams
  labels:
    sut: kstreams
spec:
  sut:
    resources:
      - configMap:
          name: shufflebench-resources-kstreams
          files:
            - "input-topic.yaml"
            - "output-topic.yaml"
            - "shuffle-kstreams-deployment.yaml"
            - "shuffle-kstreams-service.yaml"
            - "shuffle-kstreams-jmx-configmap.yaml"
#            - "shuffle-kstreams-service-monitor.yaml"
      - configMap:
          name: shufflebench-resources-latency-exporter
          files:
            - "shuffle-latency-exporter-deployment.yaml"
            - "shuffle-latency-exporter-service-monitor.yaml"
            - "shuffle-latency-exporter-service.yaml"
    afterActions:
      - delete:
          selector:
            apiVersion: kafka.strimzi.io/v1beta2
            kind: KafkaTopic
            nameRegex: "^shufflebench-kstreams-.*"
  loadGenerator:
    resources:
      - configMap:
          name: shufflebench-resources-load-generator
          files:
            - "shuffle-load-generator-service.yaml"
            - "shuffle-load-generator-deployment.yaml"
  resourceTypes:
    - typeName: "Instances"
      patchers:
        - type: "ReplicaPatcher"
          resource: "shuffle-kstreams-deployment.yaml"
  loadTypes:
    - typeName: "MessagesPerSecond"
      patchers:
        - type: "EnvVarPatcher"
          resource: "shuffle-load-generator-deployment.yaml"
          properties:
            container: "shuffle-load-generator"
            variableName: "NUM_RECORDS_PER_SOURCE_SECOND"
  slos:
    - name: "lag trend"
      sloType: "lag trend"
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        consumerGroup: shufflebench-kstreams
        thresholdRelToLoad: 0.01
        externalSloUrl: "http://localhost:80/evaluate-slope"
        warmup: 30 # in seconds
        promQLStepSeconds: 1

    - name: "lag_per_input_partition"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by(consumergroup, topic, partition) (kafka_consumergroup_lag{topic='input'} >= 0)"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "input_throughput_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by(consumergroup,topic) (rate(kafka_consumergroup_current_offset{topic='input'}[60s]) >= 0)"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "input_throughput_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by(consumergroup,topic) (rate(kafka_consumergroup_current_offset{topic='input'}[120s]) >= 0)"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--


    - name: "outputthroughput_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by (topic) (rate(kafka_server_brokertopicmetrics_messagesin_total{topic='output'}[60s]))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "outputthroughput_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by (topic) (rate(kafka_server_brokertopicmetrics_messagesin_total{topic='output'}[120s]))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--


    - name: "latency_p50_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "histogram_quantile(0.5, sum(rate(shufflebench_latency_seconds_bucket[120s])) by (le))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "latency_p90_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "histogram_quantile(0.90, sum(rate(shufflebench_latency_seconds_bucket[120s])) by (le))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "latency_p95_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "histogram_quantile(0.95, sum(rate(shufflebench_latency_seconds_bucket[120s])) by (le))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "latency_p99_120s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "histogram_quantile(0.99, sum(rate(shufflebench_latency_seconds_bucket[120s])) by (le))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--

    - name: "numberOfWorkers"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "count(kube_pod_info{pod=~\"shuffle-kstreams.*\"})"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesCPUsPercentageUtilization_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[60s])) * 100) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "Average_workerNodesCPUsPercentageUtilization_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "avg(100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[60s])) * 100) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\")))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesTotalMemoryUsageWithoutConsidBufferedandCachedGB" # GB # This calculation gives us the memory usage without cache and buffers, providing a more accurate view of the memory actively used by applications and the system that cannot be easily reclaimed.
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "(node_memory_MemTotal_bytes - node_memory_MemFree_bytes - (node_memory_Buffers_bytes + node_memory_Cached_bytes))/1024/1024/1024 and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesNetworkReceiveMB_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_network_receive_bytes_total{device=~\"eth.*\"}[60s])/1024/1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesNetworkTransmitMB_60s" #mb
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_network_transmit_bytes_total{device=~\"eth.*\"}[60s])/1024/1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesDiskReadMB_60s" #mb/s
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_disk_read_bytes_total[60s]) / 1024 / 1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "workerNodesDiskWrittenMB_60s" #mb/s
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_disk_written_bytes_total[60s]) / 1024 / 1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"workers\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesCPUsPercentageUtilization_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[60s])) * 100) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesTotalMemoryUsageWithoutConsidBufferedandCachedGB" # GB This calculation gives us the memory usage without cache and buffers, providing a more accurate view of the memory actively used by applications and the system that cannot be easily reclaimed.
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "(node_memory_MemTotal_bytes - node_memory_MemFree_bytes - (node_memory_Buffers_bytes + node_memory_Cached_bytes))/1024/1024/1024 and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesNetworkReceiveMB_60s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_network_receive_bytes_total{device=~\"eth.*\"}[60s])/1024/1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesNetworkTransmitMB_60s" #mb
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_network_transmit_bytes_total{device=~\"eth.*\"}[60s])/1024/1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesDiskReadMB_60s" #mb/s
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_disk_read_bytes_total[60s]) / 1024 / 1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--

    - name: "kafkaBrokerNodesDiskWrittenMB_60s" #mb/s
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum(irate(node_disk_written_bytes_total[60s]) / 1024 / 1024) by (instance) and on (instance) (label_replace(kube_node_info and on (node) kube_node_labels {label_type=\"kafka\"}, \"instance\", \"$1:9100\", \"internal_ip\", \"(.*)\"))"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 300 # in seconds
        promQLStepSeconds: 1 # <--
        takeOnlyFirstMetric: "false" # <--
